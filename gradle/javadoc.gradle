import javax.naming.ConfigurationException

subprojects {
    tasks.withType(Javadoc) { javadocTask ->
        def java9ToolChain = JavaVersion.toVersion(toolChain.version).java9Compatible
        // use taskGraph.whenReady to not always have a custom action which makes the task uncachable
        gradle.taskGraph.whenReady {
            if (it.hasTask(javadocTask)) {
                // make sure we use at least the Java 9 standard doclet that has nice search functionality
                if (!java9ToolChain) {
                    if ((findProperty('allowJava8Javadoc') ?: 'false').toBoolean()) {
                        logger.warn "JavaDoc ($javadocTask) is built with Java 8, no search box will be available!"
                    } else {
                        throw new ConfigurationException(
                                "JavaDoc ($javadocTask) should be built with Java 9 at least (set Gradle " +
                                        'project property allowJava8Javadoc=true to allow building with Java 8)')
                    }
                }
            }
        }
        options {
            locale 'en'
            encoding 'UTF-8'
            docTitle "Javacord $project.version ($project.shortName)"
            windowTitle "$docTitle Documentation"
            links 'https://docs.oracle.com/javase/8/docs/api/'
            delegate.use()
            version()
            author()
            splitIndex()
            if (java9ToolChain) {
                addBooleanOption 'html5', true
                addStringOption '-release', targetCompatibility.majorVersion
                if (JavaVersion.toVersion(toolChain.version).java11Compatible) {
                    addBooleanOption '-no-module-directories', true
                }
            } else {
                options.source sourceCompatibility.toString()
            }
        }
    }
}

project(':javacord-api') {
    javadoc.options.group 'Public API', '*'
    javadoc.options.group 'Internal Helpers',
            javadoc.source
                    .files
                    *.toURI()
                    *.toString()
                    .findAll { it.contains '/internal/' }
                    .collect {
                        it - ~/^(?:${sourceSets.main.java.srcDirs*.toURI()*.toString().join '|'})/ - ~/\/[^\/]*.java$/
                    }
                    .collect { it.replace '/', '.' }
                    .unique()
}

project(':javacord-core') {
    javadoc {
        dependsOn project(':javacord-api').javadoc
        def apiJavadocs = project(':javacord-api').javadoc.destinationDir.toURI() as String
        def releasedApiJavadocs = "https://docs.javacord.org/api/v/$version"
        def teamcityBuildId = findProperty('teamcity.build.id')
        def buildApiJavadocs = teamcityBuildId ? "https://docs.javacord.org/api/build/$teamcityBuildId" : null
        options.linksOffline releaseVersion ? releasedApiJavadocs : (buildApiJavadocs ?: apiJavadocs), apiJavadocs
    }
}
