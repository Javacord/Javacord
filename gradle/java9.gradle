import com.github.javaparser.JavaParser
import com.github.javaparser.ParserConfiguration.LanguageLevel
import com.github.javaparser.ast.CompilationUnit
import com.github.javaparser.ast.PackageDeclaration
import com.github.javaparser.printer.PrettyPrinter
import com.github.javaparser.printer.PrettyPrinterConfiguration
import com.github.javaparser.symbolsolver.JavaSymbolSolver
import com.github.javaparser.symbolsolver.model.resolution.TypeSolver
import com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver
import com.github.javaparser.symbolsolver.resolution.typesolvers.JavaParserTypeSolver
import com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.javaparser:javaparser-symbol-solver-core:3.6.8'
    }
}

if (JavaVersion.current().java9Compatible) {
    subprojects {
        task compileJava9(type: JavaCompile, dependsOn: [sourceSets.main.compileClasspath,
                                                         sourceSets.main.runtimeClasspath]) {
            description 'Compiles main Java 9 source'
            source sourceSets.main.java.matching { exclude 'org/javacord/core/entity/message/MessageSetImpl.java' }
            source 'src/main/java9/'
            classpath = files()
            destinationDir = file("$buildDir/classes/java9/main")
            sourceCompatibility = 9
            targetCompatibility = 9
            options.compilerArgs << '--add-modules' << 'java.annotation'
            options.compilerArgs << '--add-reads' << "org.javacord.$shortName=java.annotation"
            afterEvaluate {
                // access SourceDirectorySet#asPath in afterEvaluate
                // or projects get evaluated before all configuration is done
                options.compilerArgs << '--module-path'
                options.compilerArgs << (sourceSets.main.compileClasspath + sourceSets.main.runtimeClasspath).asPath
            }
        }

        jar {
            manifest {
                attributes 'Multi-Release': true
            }
            from(compileJava9) {
                include 'module-info.class'
                include 'org/javacord/core/entity/message/MessageSetImpl.class'
                into 'META-INF/versions/9/'
            }
        }
    }

    project(':javacord-api') {
        task generateModuleInfo {
            ext.outputDirectory = "$buildDir/generated/module-info"

            inputs.files sourceSets.main.allJava withPropertyName 'javaFiles' withPathSensitivity PathSensitivity.RELATIVE
            outputs.dir outputDirectory withPropertyName 'outputDirectory'
            outputs.cacheIf { true }

            doLast {
                delete outputDirectory

                def typeSolver = new CombinedTypeSolver(sourceSets.main.allJava.srcDirs
                        .findAll { it.directory }
                        .collect { new JavaParserTypeSolver(it) }
                        as TypeSolver[])
                typeSolver.add new ReflectionTypeSolver()
                def staticJavaparserConfiguration = JavaParser.staticConfiguration
                staticJavaparserConfiguration.symbolResolver = new JavaSymbolSolver(typeSolver)
                staticJavaparserConfiguration.languageLevel = LanguageLevel.JAVA_9

                def moduleInfoFile = new CompilationUnit()
                        .setStorage(file("$outputDirectory/module-info.java").toPath())

                def module = moduleInfoFile
                        .setModule('org.javacord.api')
                        .addSingleMemberAnnotation(SuppressWarnings, '"module"')
                        .addDirective('requires transitive java.desktop;')
                        .addDirective('uses org.javacord.api.util.internal.DelegateFactoryDelegate;')

                sourceSets.main.allJava.matching {
                    include 'org/javacord/api/**'
                    exclude 'org/javacord/api/**/internal/**'
                }.collectMany {
                    JavaParser.parse(it).findAll PackageDeclaration
                }.unique().each {
                    module.addDirective "exports $it.nameAsString;"
                }

                sourceSets.main.allJava.matching {
                    include 'org/javacord/api/**/internal/**'
                }.collectMany {
                    JavaParser.parse(it).findAll PackageDeclaration
                }.unique().each {
                    module.addDirective "exports $it.nameAsString to org.javacord.core;"
                }

                moduleInfoFile.storage.ifPresent {
                    it.save {
                        new PrettyPrinter(new PrettyPrinterConfiguration()
                                .setOrderImports(true)
                                .setEndOfLineCharacter('\n')
                        ).print it
                    }
                }
            }
        }
        rootProject.generate.dependsOn generateModuleInfo
        compileJava9.source generateModuleInfo
    }
} else {
    // use taskGraph.whenReady to not always have a custom action which makes the task uncachable
    gradle.taskGraph.whenReady {
        if (it.allTasks.find { it instanceof Jar }) {
            logger.warn 'Building on Java 8, resulting JARs will not be Jigsaw ready properly!'
        }
    }
    subprojects {
        jar {
            manifest {
                attributes 'Automatic-Module-Name': "org.javacord.$shortName"
            }
        }
    }
}
