import java.time.Instant
import org.ajoberstar.grgit.Grgit

import static java.nio.charset.StandardCharsets.ISO_8859_1

plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.4' apply false
    id 'net.researchgate.release' version '2.7.0' apply false
    id 'org.ajoberstar.grgit' version '2.3.0' apply false
    id 'biz.aQute.bnd.builder' version '5.3.0' // For OSGi
}

if (project.hasProperty('teamcity')) {
    println "##teamcity[buildNumber '$version (#${project.'build.number'})']"
    println "##teamcity[setParameter name='javacord.version' value='$version']"
}

def rootBuildDir = buildDir

ext {
    releaseVersion = !version.toString().endsWith('-SNAPSHOT')
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'

    group = 'org.javacord'
    description = 'An easy to use multithreaded library for creating Discord bots in Java'
    buildDir = rootProject.file("${rootBuildDir}/${name}")

    sourceCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding 'UTF-8'
        options.incremental true
        if (JavaVersion.current().java9Compatible) {
            afterEvaluate {
                options.compilerArgs << '--release' << platform.targetCompatibility.majorVersion
            }
        }
    }

    checkstyle {
        toolVersion '8.9'
        maxWarnings 0
    }

    normalization {
        runtimeClasspath {
            ignore 'version.properties'
        }
    }
}

project(':javacord-api') {
    processResources {
        def commitId = findProperty('build.vcs.number')
        if (!commitId) {
            def gitDir = file("$rootDir/.git")
            if (gitDir.directory) {
                def grgit
                try {
                    grgit = Grgit.open(dir: "$rootDir/.git")
                    commitId = grgit.head().id + (grgit.status().clean ? '' : '-dirty')
                } catch (Exception ignored) {
                } finally {
                    grgit?.close()
                }
            }
        }
        commitId = commitId ?: '<unknown>'
        def now = Instant.now()
        inputs.property 'version', version
        inputs.property 'commitId', commitId
        inputs.property 'buildTimestamp', now
        filteringCharset ISO_8859_1.toString()
        filesMatching('version.properties') {
            expand version: version, commitId: commitId, buildTimestamp: now
        }
    }
}

clean {
    delete rootBuildDir
}

subprojects {
    ext.shortName = name - ~/^javacord-/
    description = "An easy to use multithreaded library for creating Discord bots in Java ($shortName)"
}

defaultTasks 'build'

task 'generate'

apply from: 'gradle/dependencies.gradle'
apply from: 'gradle/jars.gradle'
apply from: 'gradle/java9.gradle'
apply from: 'gradle/tests.gradle'
apply from: 'gradle/javadoc.gradle'
apply from: 'gradle/listener-manager-generation.gradle'
apply from: 'gradle/event-dispatcher-generation.gradle'
apply from: 'gradle/readme.gradle'
apply from: 'gradle/publishing.gradle'
